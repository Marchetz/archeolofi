### accesso al database
sudo -u postgres psql
\c indiana
\d
SELECT * FROM indiana_user;

NOTA: se si fanno delle modifiche alla struttura del database, non Ã¨ escluso che,
per vederle applicate, si debba prima droppare le cose.

\list   elenca i database

resettare:
DROP DATABASE indiana;
CREATE DATABASE indiana;




### chiamate con requests


# creazione di un utente
import json
import requests
u = {"name": "Plautino", "psw": 34, "email": "email..."}
r = requests.post(
    "http://localhost:5000/api/indiana_user",
    data=json.dumps(u),
    headers={"content-type":"application/json"}
)


url = "http://localhost:5000/api/"
url = "http://firenzearcheo-feedingaliencat.rhcloud.com/api/"

u = {'name': 'Plauto', 'psw': 34}

r = requests.post(
    url + "indiana_user",
    data=u,
    headers={"content-type":"application/json"}
)



# login
from base64 import b64encode
def make_basic_auth(user, psw):
    return "Basic " + b64encode("{0}:{1}".format(user, psw))


r = requests.get(
    url + "login/",
    headers={'Authorization': make_basic_auth(u["name"], u["psw"])}
)



# postare un commento


r = requests.post(
    url + "content",
    data=json.dumps({"content":"beautiful reperto!", "poi": 15}),
    headers={"content-type":"application/json", 'Authorization': make_basic_auth(u["name"], u["psw"])}
)


# scaricare i commenti relativi ad un poi
filters = [{
    "name": "name",
    "op": "like",
    "val":"%y%"
}]

params = {"q":json.dumps({"filters": filters})}

response = requests.get(url, params=params, headers={"content-type":"application/json"})
assert response.status_code == 200
print(response.json())
