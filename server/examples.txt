### accesso al database
sudo -u postgres psql
\c indiana
\d
SELECT * FROM indiana_user;
SELECT * FROM "like";

NOTA: se si fanno delle modifiche alla struttura del database, non Ã¨ escluso che,
per vederle applicate, si debba prima droppare le cose.

\list   elenca i database

resettare:
DROP DATABASE indiana;
CREATE DATABASE indiana;




### chiamate con requests
url = "http://localhost:5000/api/"
url = "http://firenzearcheo-feedingaliencat.rhcloud.com/api/"


# creazione di un utente
import json
import requests
u = {"name": "Plautino", "psw": 34, "email": "email..."}
r = requests.post(
    "http://localhost:5000/api/indiana_user",
    data=json.dumps(u),
    headers={"content-type":"application/json"}
)


# login
from base64 import b64encode
def make_basic_auth(user, psw):
    return "Basic " + b64encode("{0}:{1}".format(user, psw))


r = requests.get(
    url + "login/",
    headers={'Authorization': make_basic_auth(u["name"], u["psw"])}
)



# postare un commento
r = requests.post(
    url + "content",
    data=json.dumps({"content":"beautiful reperto!", "poi": 15}),
    headers={"content-type":"application/json", 'Authorization': make_basic_auth(u["name"], u["psw"])}
)


# scaricare TUTTI i commenti (10 per volta)
r = requests.get(
    url + "content"
)


# scaricare i commenti relativi ad un poi
val = 15
r = requests.get(
    url + "content",
    params={
        "q": json.dumps({
            "filters": [{
                "name": "poi",
                "op": "==",
                "val": val
            }]
        })
    }
)


# modificare un commento
content_id = 4
modified_content = "new content"
r = requests.patch(
    "".join([url, "content/", str(content_id)]),
    data=json.dumps({
        "content": modified_content
    }),
    headers={
        "content-type":"application/json", 
        "Authorization": make_basic_auth(u["name"], u["psw"])
    }
)


# rimuovere un commento
content_id = 4
modified_content = "new content"
r = requests.delete(
    "".join([url, "content/", str(content_id)]),
    headers={
        "content-type":"application/json", 
        "Authorization": make_basic_auth(u["name"], u["psw"])
    }
)


# aggiungere un like
content_id = 1
do_like = True
r = requests.post(
    url + "like",
    data=json.dumps({"content_id": content_id, "do_like": do_like}),
    headers={"content-type":"application/json", 'Authorization': make_basic_auth(u["name"], u["psw"])}
)


# postare una foto
file_path = "1367157964.jpg"

r = requests.post(
    url + "content",
    data=json.dumps({"photo_announcement":True, "poi": 15}),
    headers={"content-type":"application/json", 'Authorization': make_basic_auth(u["name"], u["psw"])}
)
photo_id = str(json.loads(r.text)["photo_id"])
r = requests.post(
    "".join([url, "photo/", photo_id]),
    files={"photo": open(file_path, "rb")},
    headers={'Authorization': make_basic_auth(u["name"], u["psw"])}
)
